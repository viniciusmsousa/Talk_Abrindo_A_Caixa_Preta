dplyr::mutate_if(is.ordered, factor, ordered = FALSE) %>%
dplyr::mutate(Attrition = factor(Attrition, levels = c("Yes", "No")))
index <- 1:5
train_obs <- df[-index, ]
local_obs <- df[index, ] %>%
mutate(Attrition = NA)
# create h2o objects for modeling -----------------------------------------
y <- "Attrition"
x <- setdiff(names(train_obs), y)
train_obs.h2o <- as.h2o(train_obs)
local_obs.h2o <- as.h2o(local_obs)
h2o_rf <- h2o.randomForest(x, y, training_frame = train_obs.h2o)
explainer_caret <- lime(train_obs, h2o_rf, n_bins = 5)
explanation_caret <- lime::explain(
x = local_obs,
explainer = explainer_caret,
n_permutations = 5000,
dist_fun = "gower",
kernel_width = .75,
n_features = 10,
feature_select = "highest_weights",
labels = "Yes"
)
plot_features(explanation_caret)
workFlow <- plan(
# Preparando os Dados
dfAtrito = attrition %>%
dplyr::mutate_if(is.ordered, factor, ordered = FALSE) %>%
dplyr::mutate(Attrition = factor(Attrition, levels = c("Yes", "No"))),
indexOBSLocais = c(1:5),
obsTreino = dfAtrito[-indexOBSLocais,],
obsLocais = dfAtrito[indexOBSLocais,] %>%
mutate(Attrition = NA),
# Preparando para h2o
resposta = "Attrition",
preditores = setdiff(names(obsTreino),resposta),
obsTreino_h2o = as.h2o(obsTreino),
#obsLocais = as.h2o(obsLocais)
# Estimando com automl
automl = h2o.automl(
y = resposta,
x = preditores,
training_frame = obsTreino_h2o,
balance_classes = T,
exclude_algos = "DeepLearning",
max_runtime_secs = 60 # 3600 (1hr)
)
# Visualizando para novas observações
)
workFlow <- plan_drake(
# Preparando os Dados
dfAtrito = attrition %>%
dplyr::mutate_if(is.ordered, factor, ordered = FALSE) %>%
dplyr::mutate(Attrition = factor(Attrition, levels = c("Yes", "No"))),
indexOBSLocais = c(1:5),
obsTreino = dfAtrito[-indexOBSLocais,],
obsLocais = dfAtrito[indexOBSLocais,] %>%
mutate(Attrition = NA),
# Preparando para h2o
resposta = "Attrition",
preditores = setdiff(names(obsTreino),resposta),
obsTreino_h2o = as.h2o(obsTreino),
#obsLocais = as.h2o(obsLocais)
# Estimando com automl
automl = h2o.automl(
y = resposta,
x = preditores,
training_frame = obsTreino_h2o,
balance_classes = T,
exclude_algos = "DeepLearning",
max_runtime_secs = 60 # 3600 (1hr)
)
# Visualizando para novas observações
)
workFlow <- drake_plan(
# Preparando os Dados
dfAtrito = attrition %>%
dplyr::mutate_if(is.ordered, factor, ordered = FALSE) %>%
dplyr::mutate(Attrition = factor(Attrition, levels = c("Yes", "No"))),
indexOBSLocais = c(1:5),
obsTreino = dfAtrito[-indexOBSLocais,],
obsLocais = dfAtrito[indexOBSLocais,] %>%
mutate(Attrition = NA),
# Preparando para h2o
resposta = "Attrition",
preditores = setdiff(names(obsTreino),resposta),
obsTreino_h2o = as.h2o(obsTreino),
#obsLocais = as.h2o(obsLocais)
# Estimando com automl
automl = h2o.automl(
y = resposta,
x = preditores,
training_frame = obsTreino_h2o,
balance_classes = T,
exclude_algos = "DeepLearning",
max_runtime_secs = 60 # 3600 (1hr)
)
# Visualizando para novas observações
)
config <- drake_config(analise)
config <- drake_config(workFlow)
vis_drake_graph(config)
make(workFlow)
vis_drake_graph(config)
automl <- readd("automl")
melhorModelo <- automl@leader
obsTreino <- readd("obsTreino")
explicador <- lime(obsTreino,melhorModelo)
obsLocal <- readd("obsLocal")
obsLocais <- readd("obsLocais")
explicacao <- lime::explain(
x = obsLocais,
explainer = explicador,
n_permutations = 500,
dist_fun = "gower",
kernel_width = .75,
n_features = 10,
feature_select = "highest_weights",
labels = "Yes"
)
plot_features(explicacao)
plot_explanations(explicacao)
workFlow <- drake_plan(
# Preparando os Dados
dfAtrito = attrition %>%
dplyr::mutate_if(is.ordered, factor, ordered = FALSE) %>%
dplyr::mutate(Attrition = factor(Attrition, levels = c("Yes", "No"))),
indexOBSLocais = c(1:5),
obsTreino = dfAtrito[-indexOBSLocais,],
obsLocais = dfAtrito[indexOBSLocais,] %>%
mutate(Attrition = NA),
# Preparando para h2o
resposta = "Attrition",
preditores = setdiff(names(obsTreino),resposta),
obsTreino_h2o = as.h2o(obsTreino),
#obsLocais = as.h2o(obsLocais)
# Estimando com automl
automl = h2o.automl(
y = resposta,
x = preditores,
training_frame = obsTreino_h2o,
balance_classes = T,
exclude_algos = "DeepLearning",
max_runtime_secs = 60 # 3600 (1hr)
),
melhorModelo = automl@leader,
# lime
explicador = lime(obsTreino,melhorModelo),
explicacao = lime::explain(
x = obsLocais,
explainer = explicador,
n_permutations = 500,
dist_fun = "gower",
kernel_width = .75,
n_features = 10,
feature_select = "highest_weights",
labels = "Yes"
)
)
config <- drake_config(workFlow)
vis_drake_graph(config)
lista_pacotes <- c("lime","vip","pdp","ggplot2","caret","h2o","tidyverse","drake","rsample")
nao_instalados <- lista_pacotes[!(lista_pacotes %in% installed.packages()[,"Package"])]
if(length(nao_instalados)) install.packages(nao_instalados)
lapply(lista_pacotes,function(x){library(x,character.only=TRUE)})
rm(lista_pacotes,nao_instalados)
gc()
h2o.init()
workFlow <- drake_plan(
# Preparando os Dados
dfAtrito = attrition %>%
dplyr::mutate_if(is.ordered, factor, ordered = FALSE) %>%
dplyr::mutate(Attrition = factor(Attrition, levels = c("Yes", "No"))),
indexOBSLocais = c(1:5),
obsTreino = dfAtrito[-indexOBSLocais,],
obsLocais = dfAtrito[indexOBSLocais,] %>%
mutate(Attrition = NA),
# Preparando para h2o
resposta = "Attrition",
preditores = setdiff(names(obsTreino),resposta),
obsTreino_h2o = as.h2o(obsTreino),
#obsLocais = as.h2o(obsLocais)
# Estimando com automl
automl = h2o.automl(
y = resposta,
x = preditores,
training_frame = obsTreino_h2o,
balance_classes = T,
exclude_algos = "DeepLearning",
max_runtime_secs = 1800 # 3600 (1hr)
),
melhorModelo = automl@leader,
# lime
explicador = lime(obsTreino,melhorModelo),
explicacao = lime::explain(
x = obsLocais,
explainer = explicador,
n_permutations = 500,
dist_fun = "gower",
kernel_width = .75,
n_features = 10,
feature_select = "highest_weights",
labels = "Yes"
)
)
config <- drake_config(workFlow)
vis_drake_graph(config)
make(workFlow)
workFlow <- drake_plan(
# Preparando os Dados
dfAtrito = attrition %>%
dplyr::mutate_if(is.ordered, factor, ordered = FALSE) %>%
dplyr::mutate(Attrition = factor(Attrition, levels = c("Yes", "No"))),
indexOBSLocais = c(1:6),
obsTreino = dfAtrito[-indexOBSLocais,],
obsLocais = dfAtrito[indexOBSLocais,] %>%
mutate(Attrition = NA),
# Preparando para h2o
resposta = "Attrition",
preditores = setdiff(names(obsTreino),resposta),
obsTreino_h2o = as.h2o(obsTreino),
#obsLocais = as.h2o(obsLocais)
# Estimando com automl
automl = h2o.automl(
y = resposta,
x = preditores,
training_frame = obsTreino_h2o,
balance_classes = T,
exclude_algos = "DeepLearning",
max_runtime_secs = 1800 # 3600 (1hr)
),
melhorModelo = automl@leader,
# lime
explicador = lime(obsTreino,melhorModelo),
explicacao = lime::explain(
x = obsLocais,
explainer = explicador,
n_permutations = 500,
dist_fun = "gower",
kernel_width = .75,
n_features = 10,
feature_select = "highest_weights",
labels = "Yes"
)
)
config <- drake_config(workFlow)
vis_drake_graph(config)
make(workFlow)
vis_drake_graph(config)
automl <- readd("automl")
obsTreino <- readd("obsTreino")
obsLocais <- readd("obsLocais")
melhorModelo <- readd("melhorModelo")
explicador <- readd("explicador")
explicacao <- readd("explicacao")
plot_features(explicacao)
dfAtrito <- readd("dfAtrito")
dfAtrito %>% as_tibble()
dfAtrito[indexOBSLocais,]
indexOBSLocais <- readd("indexOBSLocais")
dfAtrito[indexOBSLocais,]
dfAtrito[indexOBSLocais,] %>% glimpse()
plot_explanations(explicacao)
lista_pacotes <- c("lime","vip","pdp","ggplot2","caret","h2o","tidyverse","drake","rsample")
nao_instalados <- lista_pacotes[!(lista_pacotes %in% installed.packages()[,"Package"])]
if(length(nao_instalados)) install.packages(nao_instalados)
lapply(lista_pacotes,function(x){library(x,character.only=TRUE)})
rm(lista_pacotes,nao_instalados)
gc()
a <- h2o.init()
workFlow <- drake_plan(
# Preparando os Dados
dfAtrito = attrition %>%
dplyr::mutate_if(is.ordered, factor, ordered = FALSE) %>%
dplyr::mutate(Attrition = factor(Attrition, levels = c("Yes", "No"))),
indexOBSLocais = c(1:6),
obsTreino = dfAtrito[-indexOBSLocais,],
obsLocais = dfAtrito[indexOBSLocais,] %>%
mutate(Attrition = NA),
# Preparando para h2o
resposta = "Attrition",
preditores = setdiff(names(obsTreino),resposta),
obsTreino_h2o = as.h2o(obsTreino),
#obsLocais = as.h2o(obsLocais)
# Estimando com automl
automl = h2o.automl(
y = resposta,
x = preditores,
training_frame = obsTreino_h2o,
balance_classes = T,
exclude_algos = "DeepLearning",
max_runtime_secs = 1800 # 3600 (1hr)
),
melhorModelo = automl@leader,
# lime
explicador = lime(obsTreino,melhorModelo),
explicacao = lime::explain(
x = obsLocais,
explainer = explicador,
n_permutations = 500,
dist_fun = "gower",
kernel_width = .75,
n_features = 10,
feature_select = "highest_weights",
labels = "Yes"
)
)
config <- drake_config(workFlow)
vis_drake_graph(config)
explicador <- readd("explicador")
explicacao <- readd("explicacao")
plot_features(explicacao)
plot_explanations(explicacao)
# Script Setup ------------------------------------------------------------
# Paper https://arxiv.org/pdf/1602.04938.pdf
# Link: http://uc-r.github.io/lime
lista_pacotes <- c("lime","vip","pdp","ggplot2","caret","h2o","tidyverse","drake","rsample")
nao_instalados <- lista_pacotes[!(lista_pacotes %in% installed.packages()[,"Package"])]
if(length(nao_instalados)) install.packages(nao_instalados)
lapply(lista_pacotes,function(x){library(x,character.only=TRUE)})
rm(lista_pacotes,nao_instalados)
gc()
h2o.init()
#h2o.no_progress()
# Work Flow ---------------------------------------------------------------
workFlow <- drake_plan(
# Preparando os Dados
dfAtrito = attrition %>%
dplyr::mutate_if(is.ordered, factor, ordered = FALSE) %>%
dplyr::mutate(Attrition = factor(Attrition, levels = c("Yes", "No"))),
indexOBSLocais = c(1:6),
obsTreino = dfAtrito[-indexOBSLocais,],
obsLocais = dfAtrito[indexOBSLocais,] %>%
mutate(Attrition = NA),
# Preparando para h2o
resposta = "Attrition",
preditores = setdiff(names(obsTreino),resposta),
obsTreino_h2o = as.h2o(obsTreino),
#obsLocais = as.h2o(obsLocais)
# Estimando com automl
automl = h2o.automl(
y = resposta,
x = preditores,
training_frame = obsTreino_h2o,
balance_classes = T,
exclude_algos = "DeepLearning",
max_runtime_secs = 1800 # 3600 (1hr)
),
melhorModelo = automl@leader,
# lime
explicador = lime(obsTreino,melhorModelo),
explicacao = lime::explain(
x = obsLocais,
explainer = explicador,
n_permutations = 500,
dist_fun = "gower",
kernel_width = .75,
n_features = 10,
feature_select = "highest_weights",
labels = "Yes"
)
)
config <- drake_config(workFlow)
vis_drake_graph(config)
lista_pacotes <- c("tidyverse","lime","rsample","ggplot2","h2o")
# lista_pacotes <- c("lime","vip","pdp","ggplot2","caret","h2o","tidyverse","drake","rsample")
nao_instalados <- lista_pacotes[!(lista_pacotes %in% installed.packages()[,"Package"])]
if(length(nao_instalados)) install.packages(nao_instalados)
lapply(lista_pacotes,function(x){library(x,character.only=TRUE)})
rm(lista_pacotes,nao_instalados)
gc()
h2o.init()
#h2o.no_progress()
# Work Flow ---------------------------------------------------------------
workFlow <- drake_plan(
# Preparando os Dados
dfAtrito = attrition %>%
dplyr::mutate_if(is.ordered, factor, ordered = FALSE) %>%
dplyr::mutate(Attrition = factor(Attrition, levels = c("Yes", "No"))),
indexOBSLocais = c(1:6),
obsTreino = dfAtrito[-indexOBSLocais,],
obsLocais = dfAtrito[indexOBSLocais,] %>%
mutate(Attrition = NA),
# Preparando para h2o
resposta = "Attrition",
preditores = setdiff(names(obsTreino),resposta),
obsTreino_h2o = as.h2o(obsTreino),
#obsLocais = as.h2o(obsLocais)
# Estimando com automl
automl = h2o.automl(
y = resposta,
x = preditores,
training_frame = obsTreino_h2o,
balance_classes = T,
exclude_algos = "DeepLearning",
max_runtime_secs = 1800 # 3600 (1hr)
),
melhorModelo = automl@leader,
# lime
explicador = lime(obsTreino,melhorModelo),
explicacao = lime::explain(
x = obsLocais,
explainer = explicador,
n_permutations = 500,
dist_fun = "gower",
kernel_width = .75,
n_features = 10,
feature_select = "highest_weights",
labels = "Yes"
)
)
config <- drake_config(workFlow)
vis_drake_graph(config)
lista_pacotes <- c("tidyverse","lime","rsample","ggplot2","h2o","drake")
# lista_pacotes <- c("lime","vip","pdp","ggplot2","caret","h2o","tidyverse","drake","rsample")
nao_instalados <- lista_pacotes[!(lista_pacotes %in% installed.packages()[,"Package"])]
if(length(nao_instalados)) install.packages(nao_instalados)
lapply(lista_pacotes,function(x){library(x,character.only=TRUE)})
rm(lista_pacotes,nao_instalados)
gc()
h2o.init()
#h2o.no_progress()
# Work Flow ---------------------------------------------------------------
workFlow <- drake_plan(
# Preparando os Dados
dfAtrito = attrition %>%
dplyr::mutate_if(is.ordered, factor, ordered = FALSE) %>%
dplyr::mutate(Attrition = factor(Attrition, levels = c("Yes", "No"))),
indexOBSLocais = c(1:6),
obsTreino = dfAtrito[-indexOBSLocais,],
obsLocais = dfAtrito[indexOBSLocais,] %>%
mutate(Attrition = NA),
# Preparando para h2o
resposta = "Attrition",
preditores = setdiff(names(obsTreino),resposta),
obsTreino_h2o = as.h2o(obsTreino),
#obsLocais = as.h2o(obsLocais)
# Estimando com automl
automl = h2o.automl(
y = resposta,
x = preditores,
training_frame = obsTreino_h2o,
balance_classes = T,
exclude_algos = "DeepLearning",
max_runtime_secs = 1800 # 3600 (1hr)
),
melhorModelo = automl@leader,
# lime
explicador = lime(obsTreino,melhorModelo),
explicacao = lime::explain(
x = obsLocais,
explainer = explicador,
n_permutations = 500,
dist_fun = "gower",
kernel_width = .75,
n_features = 10,
feature_select = "highest_weights",
labels = "Yes"
)
)
config <- drake_config(workFlow)
vis_drake_graph(config)
listaPacotes <- c("tidyverse","lime","rsample","ggplot2","h2o","drake")
naoInstalados <- listaPacotes[!(listaPacotes %in% installed.packages()[,"Package"])]
if(length(naoInstalados)) install.packages(naoInstalados)
lapply(listaPacotes,function(x){library(x,character.only=TRUE)})
rm(listaPacotes,naoInstalados)
gc()
h2o.init()
dfAtrito = attrition %>%
dplyr::mutate_if(is.ordered, factor, ordered = FALSE) %>%
dplyr::mutate(Attrition = factor(Attrition, levels = c("Yes", "No")))
dfAtrito
View(dfAtrito)
dfAtrito %>% glimpse()
dfAtrito %>% glimpse()
dfAtrito %>% glimpse()
indexOBSLocais = c(1:6)
indexOBSLocais
obsTreino = dfAtrito[-indexOBSLocais,]
obsLocais = dfAtrito[indexOBSLocais,] %>%
mutate(Attrition = NA)
# Preparando para h2o -----------------------------------------------------
resposta = "Attrition"
preditores = setdiff(names(obsTreino),resposta)
obsTreino_h2o = as.h2o(obsTreino)
automl = h2o.automl(
y = resposta,
x = preditores,
training_frame = obsTreino_h2o,
balance_classes = T,
exclude_algos = "DeepLearning",
max_runtime_secs = 60 # 3600 (1hr)
)
melhorModelo = automl@leader
melhorModelo
explicador = lime(obsTreino,melhorModelo)
explicacao = lime::explain(
x = obsLocais,
explainer = explicador,
n_permutations = 500,
kernel_width = .75,
dist_fun = "gower",
n_features = 10,
feature_select = "highest_weights",
labels = "Yes"
)
explicacao
obsLocais
obsLocais %>% glimpse()
plot_features(explicacao)
plot_explanations(explicacao)
